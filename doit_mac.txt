
#!/bin/bash

if [ "$#" -eq 0 ];then
	echo Give the main file name as argument in order to compile
	exit 0
fi

#g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/objectDetection/detection.cpp src/houghDetector.cpp src/videoStream.cpp src/KLT_ORB_Tracker.cpp -o bin/tryIt
if [ ”$1” = ”featureBased” ];then
	#This is for feature based anchors
	echo Compiling feature based anchors stream
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/ORBTrackingSwitch.cpp src/houghDetector.cpp src/videoStream.cpp src/KLT_ORB_Tracker.cpp src/trackedObjectClass.cpp -o bin/featureUSB
	echo run with ./bin/feature -streamoption-q
fi

#OF-VO
#g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/OF_VO_v2.cpp src/KLT_ORB_Tracker.cpp -o bin/tryIt

#OF-VO SIM
#g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/OF_VO_v2_SIM.cpp src/KLT_ORB_Tracker.cpp -o bin/VO_SIM

#Generate and show test dataset
#g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/basicSimStream.cpp -o bin/tryIt

if [ ”$1” = ”basicStream” ];then
	#Just basic stream
	echo Compiling basicStream
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/basicStream.cpp src/videoStream.cpp -o bin/basicStream
	echo Run with command ./bin/basicStream ”streamMode”
fi
################# Simulation with virtual scene and VO algorithm using KLT flow running
if [ ”$1” = ”basicSimFlowField” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling basicSimFlowField
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/basicSimFlowField.cpp src/homographyVO.cpp src/simulatePose.cpp -o bin/flowField
	echo Run with command ./bin/flowField
fi

################# Simulation with virtual scene and VO algorithm using KLT flow. Visualizes the derotation flow field roll/pitch
if [ ”$1” = ”derotField” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling derotation
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/visualizeDerotation.cpp src/homographyVO.cpp src/simulatePose.cpp src/opticalFlow.cpp -o bin/derotField
	echo Run with command ./bin/derotField
fi

if [ ”$1” = ”basicGimLee” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling basicGimLee streamer
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/basicGimLee.cpp -o bin/basicGimLee
	echo Run with command ./bin/basicGimLee

fi
################# Aruco tracker with normal videostream
if [ ”$1” = ”basicAruco” ];then
	echo Compiling  basic Aruco with streamer
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/basicAruco.cpp src/videoStream.cpp -o bin/basicAruco
	echo Run with command ./bin/basicAruco -mode-

fi
################# Aruco tracker with simulated scene
if [ ”$1” = ”basicArucoSim” ];then
	echo Compiling  basic Aruco with streamer
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/basicArucoSim.cpp src/simulatePose.cpp src/angulation.cpp src/azipe.cpp include/Quartic-master/quartic.cpp -o bin/basicArucoSim
	echo Run with command ./bin/basicArucoSim

fi
#################  Generate a 2d Aruco simulation scene
if [ ”$1” = ”generateArucoScene” ];then
	echo Compiling  simulation ArUco scene
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/generateArucoScene.cpp src/videoStream.cpp -o bin/arucoScene
	echo Run with command ./bin/arucoScene -mode-

fi

################# Simulation with virtual scene and VO algorithm using Correlationflow running
if [ ”$1” = ”basicSimCorrField” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling basicSimCorrField
	
#g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/basicSimCorrField.cpp src/homographyVO.cpp src/simulatePose.cpp -o bin/corrField

g++ -std=c++11 -ggdb $(pkg-config --libs opencv) spike/basicSimCorrField.cpp src/homographyVO.cpp src/simulatePose.cpp -o bin/corrField


	echo Run with command ./bin/corrField
fi

################# CORR TEST
if [ ”$1” = ”ct” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling cor tracker test
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/corrfield_test.cpp src/opticalFlow.cpp src/homographyVO.cpp src/simulatePose.cpp -o bin/ct
	echo Run with command ./bin/ct
fi


################# MASTER POSITIONING EXAMPLE (SIMULATION)
if [ ”$1” = ”basicPositioningSim” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling basicPositioningSim test
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/basicPositioningSim.cpp src/vopos.cpp src/angulation.cpp src/azipe.cpp src/opticalFlow.cpp src/homographyVO.cpp include/Quartic-master/quartic.cpp src/simulatePose.cpp src/logger.cpp -o bin/basicPositioningSim.out
	echo Run with command ./bin/basicPositioningSim.out
fi
################# MASTER POSITIONING EXAMPLE (general)
if [ ”$1” = ”positioning” ];then
	#
	echo Compiling general positioning program
	g++ -std=c++11 -fvisibility=hidden -ggdb /usr/local/lib/libboost_program_options.a `pkg-config --cflags --libs opencv` examples/positioning.cpp src/vopos.cpp src/angulation.cpp src/azipe.cpp src/opticalFlow.cpp src/homographyVO.cpp include/Quartic-master/quartic.cpp src/videoStream.cpp src/dataStream.cpp src/logger.cpp -o bin/positioning.out
	echo Run with command ./bin/positioning.out [option]
fi
################# MASTER GENERATE SIM EXXAMPLE (SIMULATION)
if [ ”$1” = ”generateSimDataset” ];then
	#
	echo Compiling generateSimDataset
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/generateSimDataset.cpp src/simulatePose.cpp src/logger.cpp src/dataStream.cpp -o bin/generateSim.out
	echo Run with command ./bin/generateSim.out
fi

################# MASTER RENAME EXAMPLE
if [ ”$1” = ”rename” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling rename test
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/rename.cpp src/logger.cpp -o bin/rename.out
	echo Run with command ./bin/rename.out
fi



################# Simulation with virtual scene and VO algorithm using KLT flow. Visualizes the derotation flow field roll/pitch
if [ ”$1” = ”calibration” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling calibration
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/camera_calibration.cpp -o bin/calib.out
	echo Run with command ./bin/calib.out
fi




if [ ”$1” = ”azipetest” ];then
	#This is for feature based anchors
	echo Compiling azipe test
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/azipe_test.cpp src/azipe.cpp include/Quartic-master/quartic.cpp -o bin/azipetest
	echo run with ./bin/azipetest
fi


################# fullangulationtest
if [ ”$1” = ”fullangulationtest” ];then
	#
	echo Compiling full angulation test
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/full_angulation_test.cpp src/vopos.cpp src/angulation.cpp src/azipe.cpp src/opticalFlow.cpp src/homographyVO.cpp include/Quartic-master/quartic.cpp -o bin/fatest
	echo Run with command ./bin/fatest [option]
fi



echo done