
#!/bin/bash

if [ "$#" -eq 0 ];then
	echo Give the main file name as argument in order to compile
	exit 0
fi

#g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/objectDetection/detection.cpp src/houghDetector.cpp src/videoStream.cpp src/KLT_ORB_Tracker.cpp -o bin/tryIt
if [ ”$1” = ”featureBased” ];then
	#This is for feature based anchors
	echo Compiling feature based anchors stream
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/ORBTrackingSwitch.cpp src/houghDetector.cpp src/videoStream.cpp src/KLT_ORB_Tracker.cpp src/trackedObjectClass.cpp -o bin/featureUSB
	echo run with ./bin/feature -streamoption-q
fi

#OF-VO
#g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/OF_VO_v2.cpp src/KLT_ORB_Tracker.cpp -o bin/tryIt

#OF-VO SIM
#g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/OF_VO_v2_SIM.cpp src/KLT_ORB_Tracker.cpp -o bin/VO_SIM

#Generate and show test dataset
#g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/basicSimStream.cpp -o bin/tryIt

if [ ”$1” = ”basicStream” ];then
	#Just basic stream
	echo Compiling basicStream
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/basicStream.cpp src/videoStream.cpp -o bin/basicStream
	echo Run with command ./bin/basicStream ”streamMode”
fi
################# Simulation with virtual scene and VO algorithm using KLT flow running
if [ ”$1” = ”basicSimFlowField” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling basicSimFlowField
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/basicSimFlowField.cpp src/homographyVO.cpp src/simulatePose.cpp -o bin/flowField
	echo Run with command ./bin/flowField
fi

################# Simulation with virtual scene and VO algorithm using KLT flow. Visualizes the derotation flow field roll/pitch
if [ ”$1” = ”derotField” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling derotation
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/visualizeDerotation.cpp src/homographyVO.cpp src/simulatePose.cpp -o bin/derotField
	echo Run with command ./bin/derotField
fi

if [ ”$1” = ”basicGimLee” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling basicGimLee streamer
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/basicGimLee.cpp -o bin/basicGimLee
	echo Run with command ./bin/basicGimLee

fi
################# Aruco tracker with normal videostream
if [ ”$1” = ”basicAruco” ];then
	echo Compiling  basic Aruco with streamer
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/basicAruco.cpp src/videoStream.cpp -o bin/basicAruco
	echo Run with command ./bin/basicAruco -mode-

fi
################# Aruco tracker with simulated scene
if [ ”$1” = ”basicArucoSim” ];then
	echo Compiling  basic Aruco with streamer
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/basicArucoSim.cpp src/simulatePose.cpp src/angulation.cpp src/azipe.cpp -o bin/basicArucoSim
	echo Run with command ./bin/basicArucoSim

fi
#################  Generate a 2d Aruco simulation scene
if [ ”$1” = ”generateArucoScene” ];then
	echo Compiling  simulation ArUco scene
	g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` examples/generateArucoScene.cpp src/videoStream.cpp -o bin/arucoScene
	echo Run with command ./bin/arucoScene -mode-

fi

################# Simulation with virtual scene and VO algorithm using Correlationflow running
if [ ”$1” = ”basicSimCorrField” ];then
	#KLT flow field with test set. version 2 tomography
	echo Compiling basicSimCorrField
	
#g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/basicSimCorrField.cpp src/homographyVO.cpp src/simulatePose.cpp -o bin/corrField

g++ -std=c++11 -ggdb $(pkg-config --libs opencv) spike/basicSimCorrField.cpp src/homographyVO.cpp src/simulatePose.cpp -o bin/corrField


	echo Run with command ./bin/corrField
fi

#Just stream images and data from gimlee
#g++ -std=c++11 -ggdb `pkg-config --cflags --libs opencv` spike/basicGimLee.cpp -o bin/gimlee



# Feature matching 
#./bin/tryIt picsForMatching/roi1.png picsForMatching/img1.png
#./bin/tryIt /Users/Fredrik/Datasets/picsForMatching/box.png /Users/Fredrik/Datasets/picsForMatching/box_in_scene.png

#./bin/tryIt 3 /Users/Fredrik/Datasets/picsForMatching/objectDetection/images/
#./bin/tryIt 3 /Users/Fredrik/Datasets/Euroc/V102/cam0/data/cam0_%04d.png

#debug:
#lldb ./bin/tryIt 3
#compile flag -ggdb


echo done